generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  brands        Brand[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id            String         @id @default(cuid())
  name          String
  description   String         @db.Text
  address       String
  phone         String         @default("")
  images        String[]       @default([])
  features      Feature[]
  specialOffers SpecialOffer[]
  events        Event[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Feature {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model SpecialOffer {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Event {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  date         DateTime
  image        String     @default("")
  city         String     @default("")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Staff {
  id        String   @id @default(cuid())
  fullName  String
  position  String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HeroSection {
  id           String   @id @default(cuid())
  page         String   @unique
  image        String?
  brightness   Float    @default(0.5)
  scrollerTexts String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AnonceSection {
  id        String   @id @default(cuid())
  header    String   @db.Text
  anonces   Anonce[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Anonce {
  id        String   @id @default(cuid())
  title     String
  text      String
  section   AnonceSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id            String   @id @default(cuid())
  name          String
  description String   @default("")
  slug          String   @unique
  heroImage     String?
  title         String?
  welcomeText   String? @db.Text
  address       String?
  mapLink       String?
  phone         String?
  whatsapp      String?
  email         String?
  workingHours  Json?
  mainGallery   Json?
  navigationTags Json?
  brandHistory  Json?
  features      Json?
  specialOffers Json?
  bottomGallery Json?
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  mainImage     String?
  gallery       Json?

  user User? @relation(fields: [userId], references: [id])
}

model PhotoReport {
  id           String   @id @default(cuid())
  title        String
  city         String
  venue        String
  photographer String
  preview      String   // Загруженная обложка репортажа
  folderPath   String   // Путь к папке на Яндекс.Диске (например: /aho restaurant)
  publishedAt  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AboutSection {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  email         String
  gisLink       String
  instagramLink String
  logo          String
  logoDark      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
} 